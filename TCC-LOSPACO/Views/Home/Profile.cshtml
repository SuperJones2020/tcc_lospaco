@using TCC_LOSPACO.Models
@using TCC_LOSPACO.CustomHtmlHelper

@{
    ViewBag.Title = "Minha Conta -";
    var user = TCC_LOSPACO.Security.Authentication.GetUser();
}

<main class="div-img" style="background-image: url('https://picsum.photos/id/53/1920/3240/?blur=3'); filter: grayscale(.125)">
    <div class="options-container row col-4-child l-col-12-child max-w">
        @Html.Partial("Profile/Containers/_ChangePassword")
        @Html.Partial("Profile/Containers/_MyData")
        @Html.Partial("Profile/Containers/_Logout")
    </div>
    <!---->
    <div class="options-container row col-4-child l-col-12-child max-w">
        @Html.Partial("Profile/Containers/_Users")
        @Html.Partial("Profile/Containers/_Employees")
        @Html.Partial("Profile/Containers/_Packages")
    </div>
    <div class="options-container row col-4-child l-col-12-child max-w">
        @Html.Partial("Profile/Containers/_Schedules")
        @Html.Partial("Profile/Containers/_Services")
        @Html.Partial("Profile/Containers/_Schedule")
    </div>

    <div class="options-container row col-4-child l-col-12-child max-w">
        @Html.Partial("Profile/Containers/_Categories")
        @Html.Partial("Profile/Containers/_MyAppointments")
    </div>

</main>

<remove-footer />

@section scripts{
    <script>
        activeProfileUI();
        activeEmployeeSelection();
        activeDateInput();
        activeCarousel({ prev: ".prev-item", next: ".prox-item", carousel: ".employee-carousel", time: .5, anim: "cubic-bezier(.73,.19,.14,.98)" });

        const containers = [
            {
                id: "employee",
                do: async (content) => {
                    const form = content.querySelector("form");
                    const tableContent = content.querySelector(".table-content");
                    const ObjectType = "Employee";
                    const inputs = form.querySelectorAll(".customized-input");
                    const objectId = () => form.getAttribute("data-object-id");

                    const data = [
                        { id: "custfullname", data: () => get(form, data[0].id).value },
                        { id: "custcpf", data: () => get(form, data[1].id).value },
                        { id: "empbirthdate", data: () => get(form, data[2].id).value },
                        { id: "emprg", data: () => get(form, data[3].id).innerHTML },
                        { id: "empsalary", data: () => get(form, data[4].id).value },
                        { id: "custphonenumber", data: () => get(form, data[5].id).value },
                        { id: "empimage", data: () => sendImage() }
                    ];

                    get(form, "empimage").addEventListener("change", () => readImage(get(form, "empimage"), data => get(form, "image_display").querySelector("img").setAttribute("src", "data:image/png;base64," + data)));
                    async function sendImage() {
                        const token = await generateNewSignature();
                        readImage(get(form, "empimage"), imageData => sendRequest("post", `/${ObjectType}/Update`, {
                            table: get(form, "empimage").getAttribute("data-sub-id"),
                            id: objectId(),
                            column: get(form, "empimage").getAttribute("data-id"),
                            value: imageData
                        }, { Loader: ".main-loader", ContentHeaders: [{ Key: "Authorization", Value: `Bearer ${token}` }] }));
                    }

                    setDropdownOnClick(get(form, "empgender"), async dataOption => {
                        const token = await generateNewSignature();
                        sendRequest("post", `/${ObjectType}/Update`, {
                            table: get(form, "empgender").getAttribute("data-sub-id"),
                            id: objectId(),
                            column: get(form, "empgender").getAttribute("data-id"),
                            value: dataOption
                        }, { Loader: ".main-loader", ContentHeaders: [{ Key: "Authorization", Value: `Bearer ${token}` }] })
                    });

                    setInputs(inputs, async inputId => {
                        const dataValue = data.filter(x => x.id === inputId)[0].data;
                        if (inputId === "empimage") dataValue();
                        else {
                            const token = await generateNewSignature();
                            sendRequest("post", `/${ObjectType}/Update`,
                                {
                                    table: form.querySelector(`[data-id=${inputId}]`).getAttribute("data-sub-id"),
                                    id: objectId(),
                                    column: inputId,
                                    value: dataValue()
                                }, {
                                    Loader: ".main-loader",
                                    ContentHeaders: [{ Key: "Authorization", Value: `Bearer ${token}` }],
                                    OnSuccess: () => {
                                        if (inputId === "scheddatetime") {
                                            searchTableItem(tableContent, objectId(), x => x.querySelector(".cpf").innerHTML = dataValue());
                                        } else if (inputId === "custfullname") {
                                            form.querySelector(".title-focus").innerHTML = dataValue();
                                            searchTableItem(tableContent, objectId(), x => x.querySelector(".name").innerHTML = dataValue());
                                        }
                                    }
                                });
                        }
                    });

                    setContainerItemsSelection(form, ObjectType);
                    configInsertBtn(content, "Adicionar Funcionário");
                }
            },
            {
                id: "package",
                do: async (content) => {
                    const form = content.querySelector("form");
                    const tableContent = content.querySelector(".table-content");
                    const ObjectType = "Package";
                    const inputs = form.querySelectorAll(".customized-input");
                    const objectId = () => form.getAttribute("data-object-id");

                    const data = [
                        { id: "packname", data: () => get(form, data[0].id).value },
                        { id: "packdescr", data: () => get(form, data[1].id).value },
                        { id: "packprice", data: () => get(form, data[2].id).value },
                        { id: "packsmalldesc", data: () => get(form, data[3].id).value },
                        { id: "packdescr", data: () => get(form, data[4].id).value },
                        { id: "packimage", data: () => sendImage() }
                    ];

                    get(form, "packimage").addEventListener("change", () => readImage(get(form, "packimage"), data => get(form, "image_display").querySelector("img").setAttribute("src", "data:image/png;base64," + data)));
                    async function sendImage() {
                        const token = await generateNewSignature();
                        readImage(get(form, "packimage"), imageData => sendRequest("post", `/${ObjectType}/Update`,
                            {
                                id: objectId(),
                                column: get(form, "packimage").getAttribute("data-id"),
                                value: imageData
                            }, { Loader: ".main-loader", ContentHeaders: [{ Key: "Authorization", Value: `Bearer ${token}` }] }));
                    }

                    setInputs(inputs, async inputId => {
                        const dataValue = data.filter(x => x.id === inputId)[0].data;
                        if (inputId === "packimage") dataValue();
                        else {
                            const token = await generateNewSignature();
                            sendRequest("post", `/${ObjectType}/Update`,
                                {
                                    id: objectId(),
                                    column: inputId,
                                    value: dataValue()
                                }, {
                                    Loader: ".main-loader",
                                    ContentHeaders: [{ Key: "Authorization", Value: `Bearer ${token}` }],
                                    OnSuccess: () => {
                                        if (inputId === "packname") {
                                            form.querySelector(".title-focus").innerHTML = dataValue();
                                            searchTableItem(tableContent, objectId(), x => x.querySelector(".name").innerHTML = dataValue());
                                        }
                                    }
                                });
                        }
                    });

                    setContainerItemsSelection(form, ObjectType);
                    configInsertBtn(content, "Adicionar Pacote");
                }
            },
            {
                id: "schedule",
                do: async (content) => {
                    const form = content.querySelector(".form");
                    const tableContent = content.querySelector(".table-content");
                    const ObjectType = "Schedule";
                    const inputs = form.querySelectorAll(".customized-input");
                    const objectId = () => form.getAttribute("data-object-id");

                    const data = [
                        {
                            id: "scheddatetime", data: () => {
                                const dateTime = get(form, "date").value;
                                return dateTime + " " + get(form, "time").value;
                            }
                        },
                        { id: "performed", data: () => get(form, data[1].id).getAttribute("data-bool") }
                    ];

                    const boolType = get(form, "performed");
                    boolType.addEventListener("click", async () => {
                        const dataValue = data.filter(x => x.id === boolType.getAttribute("data-id"))[0].data;
                        const v = dataValue() === "true" ? 1 : 0;
                        const token = await generateNewSignature();
                        sendRequest("post", `/${ObjectType}/Update`,
                            {
                                id: objectId(),
                                column: boolType.getAttribute("data-id"),
                                value: v
                            }, {
                                Loader: ".main-loader",
                                ContentHeaders: [{ Key: "Authorization", Value: `Bearer ${token}` }],
                                OnSuccess: () => {
                                    if (dataValue() === "true") searchTableItem(tableContent, objectId(), x => x.querySelector(".data-content").classList.add("main-bg-gray"));
                                    else searchTableItem(tableContent, objectId(), x => x.querySelector(".data-content").classList.remove("main-bg-gray"));
                                }
                            });
                    })

                    setInputs(inputs, async inputId => {
                        if (inputId === "date" | inputId === "time") inputId = "scheddatetime";
                        const dataValue = data.filter(x => x.id === inputId)[0].data;
                        const token = await generateNewSignature();
                        sendRequest("post", `/${ObjectType}/Update`,
                            {
                                id: objectId(),
                                column: inputId,
                                value: dataValue()
                            }, {
                                Loader: ".main-loader",
                                ContentHeaders: [{ Key: "Authorization", Value: `Bearer ${token}` }],
                                OnSuccess: () => {
                                    if (inputId === "scheddatetime") {
                                        const date = standardizeDateString(dataValue().split(' ')[0]);
                                        const time = dataValue().split(' ')[1];
                                        form.querySelector(".title-focus").innerHTML = date + " " + time;
                                        searchTableItem(tableContent, objectId(), x => x.querySelector(".date").innerHTML = date + " " + time);
                                    }
                                }
                            });
                    });
                    configInsertBtn(content, "Adicionar Agendamento");
                }
            },
            {
                id: "service",
                do: async (content) => {
                    const form = content.querySelector("form");
                    const tableContent = content.querySelector(".table-content");
                    const ObjectType = "Service";
                    const inputs = form.querySelectorAll(".customized-input");
                    const objectId = () => form.getAttribute("data-object-id");

                    const data = [
                        { id: "servname", data: () => get(form, data[0].id).value },
                        { id: "servprice", data: () => get(form, data[1].id).value },
                        { id: "servsmalldesc", data: () => get(form, data[2].id).value },
                        { id: "servdescr", data: () => get(form, data[3].id).value },
                        { id: "servtime", data: () => get(form, data[4].id).value },
                        { id: "servimage", data: () => sendImage() },
                        { id: "servclothing", data: () => get(form, data[6].id).value }
                    ];

                    get(form, "servimage").addEventListener("change", () => readImage(get(form, "servimage"), data => get(form, "image_display").querySelector("img").setAttribute("src", "data:image/png;base64," + data)));
                    async function sendImage() {
                        const token = await generateNewSignature();
                        readImage(get(form, "servimage"), imageData => sendRequest("post", `/${ObjectType}/Update`,
                            {
                                id: objectId(),
                                column: get(form, "servimage").getAttribute("data-id"),
                                value: imageData
                            }, { Loader: ".main-loader", ContentHeaders: [{ Key: "Authorization", Value: `Bearer ${token}` }] }));
                    }

                    setDropdownOnClick(get(form, "categoryid"), async dataOption => {
                        const token = await generateNewSignature();
                            sendRequest("post", `/${ObjectType}/Update`, {
                                id: objectId(),
                                column: get(form, "categoryid").getAttribute("data-id"),
                                value: dataOption
                        }, { Loader: ".main-loader", ContentHeaders: [{ Key: "Authorization", Value: `Bearer ${token}` }] })

                    });

                    setInputs(inputs, async inputId => {
                        const dataValue = data.filter(x => x.id === inputId)[0].data;
                        if (inputId === "servimage") dataValue();
                        else {
                            const token = await generateNewSignature();
                            sendRequest("post", `/${ObjectType}/Update`,
                                {
                                    id: objectId(),
                                    column: inputId,
                                    value: dataValue()
                                }, {
                                    Loader: ".main-loader",
                                    ContentHeaders: [{ Key: "Authorization", Value: `Bearer ${token}` }],
                                    OnSuccess: () => {
                                        if (inputId === "servname") {
                                            form.querySelector(".title-focus").innerHTML = dataValue();
                                            searchTableItem(tableContent, objectId(), x => x.querySelector(".name").innerHTML = dataValue());
                                        } else if (inputId === "categoryid") searchTableItem(tableContent, objectId(), x => x.querySelector(".category").innerHTML = dataValue());
                                    }
                                });
                        }
                    });

                    configInsertBtn(content, "Adicionar Serviço");
                }
            }, {
                id: "user",
                do: async (content) => {
                    const form = content.querySelector(".form");
                    const ObjectType = "Customer";
                    const inputs = form.querySelectorAll(".customized-input");
                    const objectId = () => @user.Account.Id;

                    const data = [
                        { id: "custusername", data: () => get(form, data[0].id).value },
                        { id: "custfullname", data: () => get(form, data[1].id).value },
                        { id: "custcpf", data: () => get(form, data[2].id).value },
                        { id: "custphonenumber", data: () => get(form, data[3].id).value }
                    ];

                    setInputs(inputs, async inputId => {
                        const dataValue = data.filter(x => x.id === inputId)[0].data;
                        const token = await generateNewSignature();
                        sendRequest("post", `/${ObjectType}/Update`,
                            {
                                id: objectId(),
                                column: inputId,
                                value: dataValue()
                            }, {
                                Loader: ".main-loader",
                                ContentHeaders: [{ Key: "Authorization", Value: `Bearer ${token}` }]
                            });

                    });
                }
            },
            {
                id: "category",
                do: async (content) => {
                    const form = content.querySelector("form");
                    const tableContent = content.querySelector(".table-content");
                    const ObjectType = "Category";
                    const inputs = form.querySelectorAll(".customized-input");
                    const objectId = () => form.getAttribute("data-object-id");

                    const data = [
                        { id: "catname", data: () => get(form, data[0].id).value },
                        { id: "image", data: () => sendImage() }
                    ];

                    get(form, "image").addEventListener("change", () => readImage(get(form, "image"), data => get(form, "image_display").querySelector("img").setAttribute("src", "data:image/png;base64," + data)));
                    async function sendImage() {
                        const token = await generateNewSignature();
                        readImage(get(form, "image"), imageData => sendRequest("post", `/${ObjectType}/Update`,
                            {
                                id: objectId(),
                                column: get(form, "image").getAttribute("data-id"),
                                value: imageData
                            }, { Loader: ".main-loader", ContentHeaders: [{ Key: "Authorization", Value: `Bearer ${token}` }] }));
                    }

                    setInputs(inputs, async inputId => {
                        const dataValue = data.filter(x => x.id === inputId)[0].data;
                        if (inputId === "image") dataValue();
                        else {
                            const token = await generateNewSignature();
                            sendRequest("post", `/${ObjectType}/Update`,
                                {
                                    id: objectId(),
                                    column: inputId,
                                    value: dataValue()
                                }, {
                                    Loader: ".main-loader",
                                    ContentHeaders: [{ Key: "Authorization", Value: `Bearer ${token}` }],
                                    OnSuccess: () => {
                                        if (inputId === "catname") {
                                            form.querySelector(".title-focus").innerHTML = dataValue();
                                            searchTableItem(tableContent, objectId(), x => x.querySelector(".name").innerHTML = dataValue());
                                        }
                                    }
                                });
                        }
                    });

                    configInsertBtn(content, "Adicionar Categoria");
                }
            }];

        const items = document.querySelectorAll(".item");
        items.forEach(c => {
            const button = c.querySelector("[data-item-button]");
            const content = c.querySelector("[data-content]");
            if (content !== null) {
                const container = content.getAttribute("data-content");
                if (containers.filter(c => c.id === container).length !== 0)
                    button.addEventListener("click", () => containers.filter(c => c.id === container)[0].do(content), { once: true });
            }
        });

        function configInsertBtn(content, txt) {
            const form = content.querySelector("form");
            const add = content.querySelector(".add-object-btn");
            if (add !== null) {
                add.addEventListener("click", () => {
                    content.style.transform = "translateX(-100%)";
                    configInputs(form, "insertion", txt, "");
                });
            }
        }

        function searchTableItem(tableContent, id, callback) {
            const items = tableContent.querySelectorAll(".data-item");
            items.forEach(x => {
                if (x.getAttribute("data-id") === id) callback(x);
            });
        }

        async function setDropdownOnClick(dropdown, callback) {
            const dropContent = dropdown.querySelector(".dropdown-content").querySelectorAll("label");
            dropContent.forEach(o => {
                const dataOption = o.getAttribute("data-option")
                o.addEventListener("click", () => {
                    const canRequest = dropdown.hasAttribute("data-cannot-send-request");
                    if (!canRequest) callback(dataOption);
                });
            });
        }

        function setContainerItemsSelection(form, objType) {
            const objectId = () => form.getAttribute("data-object-id");
            const container = form.querySelector(".select-items-container");
            const tc = container.querySelector(".table-content");
            const items = tc.querySelectorAll(".data-item");
            items.forEach(x => {
                x.addEventListener("click", async () => {
                    if (!tc.hasAttribute("data-cannot-send-request")) {
                        const isSelected = x.getAttribute("data-selected");
                        const token = await generateNewSignature();
                        if (isSelected === "true") {
                            sendRequest("post", `/${objType}/InsertService`, {
                                id: objectId(),
                                servId: x.getAttribute("data-id")
                            }, {
                                    Loader: ".main-loader",
                                    ContentHeaders: [{ Key: "Authorization", Value: `Bearer ${token}` }]
                                });
                        } else {
                            sendRequest("post", `/${objType}/RemoveService`, {
                                id: objectId(),
                                servId: x.getAttribute("data-id")
                            }, {
                                    Loader: ".main-loader",
                                    ContentHeaders: [{ Key: "Authorization", Value: `Bearer ${token}` }]
                                });
                        }
                    }
                });
            });
        }

        function setDropdownItem(el, value) {
            el.querySelector(".dropdown-select-item").setAttribute("data-option", value);
        }

        async function setImageSrc(el, value) {
            el.querySelector("img").setAttribute("src", value);
        }

        function get(element, input) {
            return element.querySelector(`[data-id='${input}']`);
        }

        async function setInputs(inputs, callback) {
            inputs.forEach(i => {
                const saveBtn = i.querySelector(".save-btn");
                const el = i.querySelector("input") === null ? i.querySelector("textarea") : i.querySelector("input");
                if (saveBtn !== null) {
                    saveBtn.addEventListener("click", () => {
                        const dataStatus = el.getAttribute("data-status");
                        if (dataStatus === "editing") {
                            const inputId = i.querySelector("input") === null ? i.querySelector("textarea").getAttribute("data-id") : i.querySelector("input").getAttribute("data-id");
                            callback(inputId);
                        }
                    });
                }
            });
        }

        async function configInputs(form, type, ft, st) {
            const previewMode = type === "preview" ? true : false;
            const color = previewMode ? "black" : "gray";
            const eventConfig = previewMode ? "auto" : "none";
            const inputs = form.querySelectorAll(".customized-input");

            const insertDiv = form.querySelector(".insert-div");
            const previewDiv = form.querySelector(".preview-div");
            const btnRequest = form.querySelector(".perform-add-request-btn");
            const sic = form.querySelector(".select-items-container");
            let table = null;
            if (sic !== null) table = sic.querySelector(".table-content");

            if (btnRequest !== null) {
                if (previewMode) {
                    btnRequest.classList.add("d-none");
                    if (insertDiv !== null) insertDiv.classList.add("d-none");
                    if (previewDiv !== null) previewDiv.classList.remove("d-none");
                    if (table !== null) {
                        table.removeAttribute("data-cannot-send-request");
                    }
                } else {
                    btnRequest.classList.remove("d-none");
                    if (insertDiv !== null) insertDiv.classList.remove("d-none");
                    if (previewDiv !== null) previewDiv.classList.add("d-none");
                    if (table !== null) {
                        table.setAttribute("data-cannot-send-request", "");
                        table.setAttribute("data-selected-items", "");
                    }
                }
            }


            const title = form.querySelector(".profile-title");
            title.innerHTML = `${ft} <b class="bolder font-jos f-7 profile-title title-focus">${st}</b>`;

            const dropdowns = form.querySelectorAll(".customized-dropdown");
            if (!previewMode && dropdowns !== null) dropdowns.forEach(d => d.setAttribute("data-cannot-send-request", ""));
            else if (previewMode && dropdowns !== null) dropdowns.forEach(d => d.removeAttribute("data-cannot-send-request"));

            const image = get(form, "image_display");
            if (image !== null) image.querySelector("img").setAttribute("src", "");

            inputs.forEach(i => {
                const saveBtn = i.querySelector(".save-btn");
                const editBtn = i.querySelector(".edit-btn");
                const el = i.querySelector("input") === null ? i.querySelector("textarea") : i.querySelector("input");
                if (el !== null) el.value = "";
                if (previewMode && el !== null) {
                    el.setAttribute("disabled", "");
                } else {
                    if (el !== null && !el.hasAttribute("data-always-disabled")) el.removeAttribute("disabled");
                }

                if (saveBtn !== null & editBtn !== null) {
                    saveBtn.style.color = color;
                    editBtn.style.color = color;
                    saveBtn.style.pointerEvents = eventConfig;
                    editBtn.style.pointerEvents = eventConfig;
                }
            });

        }

        function customerDataTaken(res) {
            const form = document.querySelector("[data-content=customer]").querySelector(".form");
            const Customer = res.Object;
            form.querySelector(".title-focus").innerHTML = Customer.Account.Email;
            get(form, "username").value = Customer.Username;
            get(form, "name").value = Customer.FullName;
            get(form, "email").value = Customer.Account.Email;
            get(form, "cpf").value = Customer.CPF;
            get(form, "number").value = Customer.Phone;
        }

        function employeeDataTaken(res) {
            const form = document.querySelector("[data-content=employee]").querySelector("form");
            const Employee = res.Object;
            const table = form.querySelector(".table-content");
            configInputs(form, "preview", "Dados de ", Employee.Customer.FullName);
            form.setAttribute("data-object-id", Employee.Customer.Account.Id);
            get(form, "custfullname").value = Employee.Customer.FullName;
            get(form, "email").value = Employee.Customer.Account.Email;
            get(form, "custcpf").value = Employee.Customer.CPF;
            get(form, "emprg").value = Employee.RG;
            get(form, "custphonenumber").value = Employee.Customer.Phone;
            get(form, "empbirthdate").value = formatDateString(Employee.Birth.replace(" 00:00:00", '').trim());
            get(form, "empsalary").value = Employee.Salary;
            setImageSrc(get(form, "image_display"), readImageFromDatabase(Employee.Image));
            setDropdownItem(get(form, "empgender"), Employee.Genre)

            const servicesObj = Object.values(Employee.Services);
            const services = [];
            for (let i = 0; i < servicesObj.length; i++) services.push(servicesObj[i].Id);
            table.setAttribute("data-selected-items", services);

        }

        function packageDataTaken(res) {
            const form = document.querySelector("[data-content=package]").querySelector("form");
            const Package = res.Object;
            const table = form.querySelector(".table-content");
            configInputs(form, "preview", "Dados de ", Package.Name);
            form.setAttribute("data-object-id", Package.Id);
            get(form, "packname").value = Package.Name;
            get(form, "packsmalldesc").value = Package.MinifiedDesc;
            get(form, "packdescr").value = Package.Description;
            get(form, "packprice").value = Package.Price;
            setImageSrc(get(form, "image_display"), readImageFromDatabase(Package.Image));

            const servicesObj = Object.values(Package.Services);
            const services = [];
            for (let i = 0; i < servicesObj.length; i++) services.push(servicesObj[i].Id);
            table.setAttribute("data-selected-items", services);
        }

        function serviceDataTaken(res) {
            const form = document.querySelector("[data-content=service]").querySelector("form");
            const Service = res.Object;
            form.setAttribute("data-object-id", Service.Id);
            configInputs(form, "preview", "Dados sobre ", Service.Name);
            get(form, "servname").value = Service.Name;
            get(form, "servsmalldesc").value = Service.MinifiedDesc;
            get(form, "servdescr").value = Service.CompleteDesc;
            get(form, "servprice").value = Service.Price;
            get(form, "servclothing").value = Service.PropperClothing;
            get(form, "servtime").value = formatTime(`${Service.Time.Hours}:${Service.Time.Minutes}:${Service.Time.Seconds}`);
            setImageSrc(get(form, "image_display"), readImageFromDatabase(Service.Image));
            setDropdownItem(get(form, "categoryid"), Service.Category.Id)
        }

        function scheduleDataTaken(res) {
            const form = document.querySelector("[data-content=schedule]").querySelector(".form");
            const form2 = document.querySelector("[data-content=appointments]").querySelector(".form");
                const Schedule = res.Object;
            if (form !== null) {
                form.setAttribute("data-object-id", Schedule.Id);
                configInputs(form, "preview", "Dados sobre ", Schedule.Date);
                get(form, "servid").value = Schedule.Service.Name;
                get(form, "employeeloginid").value = Schedule.Employee.Customer.FullName;
                get(form, "date").value = formatDateString(Schedule.Date.split(' ')[0]);
                get(form, "time").value = Schedule.Date.split(' ')[1];
                get(form, "performed").setAttribute("data-bool", Schedule.IsPerformed);
                get(form, "customer").value = `Nome: ${Schedule.Customer.FullName} / CPF: ${Schedule.Customer.CPF}`;
            } else {
                configInputs(form2, "preview", "Dados sobre ", Schedule.Date);
                get(form2, "servid").value = Schedule.Service.Name;
                get(form2, "employeeloginid").value = Schedule.Employee.Customer.FullName;
                get(form2, "date").value = formatDateString(Schedule.Date.split(' ')[0]);
                get(form2, "time").value = Schedule.Date.split(' ')[1];
                get(form2, "performed").setAttribute("data-bool", Schedule.IsPerformed);
            }
        }

        function categoryDataTaken(res) {
            const form = document.querySelector("[data-content=category]").querySelector("form");
            const Category = res.Object;
            form.setAttribute("data-object-id", Category.Id);
            configInputs(form, "preview", "Dados sobre ", Category.Name);
            get(form, "catname").value = Category.Name;
            setImageSrc(get(form, "image_display"), readImageFromDatabase(Category.Image));
        }

        function OnCategoryInserted(res) {
            const c = document.querySelector("[data-content=category]");
            const table = c.querySelector(".table-content");
            table.insertAdjacentHTML("beforeend", res.Category)
            const item = table.querySelectorAll(`[data-id='${res.Id}']`);
            c.style.transform = "translateX(0%)";
            setTableItemAsRequestSender(c, item);
        }

        function OnEmployeeInserted(res) {
            const c = document.querySelector("[data-content=employee]");
            const table = c.querySelector(".table-content");
            table.insertAdjacentHTML("beforeend", res.Employee)
            const item = table.querySelectorAll(`[data-id='${res.Id}']`);
            c.style.transform = "translateX(0%)";
            setTableItemAsRequestSender(c, item);
        }

        function OnServiceInserted(res) {
            const c = document.querySelector("[data-content=service]");
            const table = c.querySelector(".table-content");
            table.insertAdjacentHTML("beforeend", res.Service)
            const item = table.querySelectorAll(`[data-id='${res.Id}']`);
            c.style.transform = "translateX(0%)";
            setTableItemAsRequestSender(c, item);
        }

        function OnPackageInserted(res) {
            const c = document.querySelector("[data-content=package]");
            const table = c.querySelector(".table-content");
            table.insertAdjacentHTML("beforeend", res.Package)
            const item = table.querySelectorAll(`[data-id='${res.Id}']`);
            c.style.transform = "translateX(0%)";
            setTableItemAsRequestSender(c, item);
        }

        function formatDateString(data) {
            const day = data.split("/")[0];
            const month = data.split("/")[1];
            const year = data.split("/")[2];
            return year + '-' + ("0" + month).slice(-2) + '-' + ("0" + day).slice(-2);
        }

        function standardizeDateString(data) {
            data = data.split(' ')[0] || data;
            const day = data.split("-")[2];
            const month = data.split("-")[1];
            const year = data.split("-")[0];
            return ("0" + day).slice(-2) + '/' + ("0" + month).slice(-2) + '/' + year;
        }

        function formatTime(data) {
            const hour = data.split(":")[0];
            const min = data.split(":")[1];
            const sec = data.split(":")[2];
            return ("0" + hour).slice(-2) + ':' + ("0" + min).slice(-2) + ':' + ("0" + sec).slice(-2);
        }

    </script>
}